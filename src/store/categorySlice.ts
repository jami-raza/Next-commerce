import {
    createAsyncThunk,
    createSlice,
  } from '@reduxjs/toolkit';
//   import axios from 'axios';
  import type { RootState } from './store';
import { getProducts } from '@/app/api/getProducts';
import { groq } from 'next-sanity'
import client from '../../client';
import { ICategory } from '@/types/category.type';
  // here we are typing the types for the state
  export type categoryState = {
    data: ICategory[]
    pending: boolean;
    error: boolean;
  };
  
  const initialState: categoryState = {
    data: [],
    pending: false,
    error: false,
  };
  
  // This action is what we will call using the dispatch in order to trigger the API call.
  export const getAsyncCategory = createAsyncThunk('category/fetchCategory', async () => {
    const response = await client.fetch(groq`*[_type == 'category']{
        _id,
        name,
        "imageUrl": image.asset->url,
      }`)
  //   const response = 
  console.log(response, "Response")
    return response;
  });
  
  export const categorySlice = createSlice({
    name: 'category',
    initialState,
    reducers: {
  // leave this empty here
    },
    extraReducers: (builder) => {
        // Add reducers for additional action types here, and handle loading state as needed
        builder.addCase(getAsyncCategory.fulfilled, (state, action) => {
          // Add user to the state array
          state.data = action.payload
          state.pending = false
          state.error = false
        })
      },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices. 
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes. 
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
   
  });
  
  export const selectcategory = (state: RootState) => state.categoryReducer;
  
  export default categorySlice.reducer;